package net.petcu.store.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class PricedProductAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPricedProductAllPropertiesEquals(PricedProduct expected, PricedProduct actual) {
        assertPricedProductAutoGeneratedPropertiesEquals(expected, actual);
        assertPricedProductAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPricedProductAllUpdatablePropertiesEquals(PricedProduct expected, PricedProduct actual) {
        assertPricedProductUpdatableFieldsEquals(expected, actual);
        assertPricedProductUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPricedProductAutoGeneratedPropertiesEquals(PricedProduct expected, PricedProduct actual) {
        assertThat(actual)
            .as("Verify PricedProduct auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPricedProductUpdatableFieldsEquals(PricedProduct expected, PricedProduct actual) {
        assertThat(actual)
            .as("Verify PricedProduct relevant properties")
            .satisfies(a -> assertThat(a.getActive()).as("check active").isEqualTo(expected.getActive()))
            .satisfies(a -> assertThat(a.getUpdatedDate()).as("check updatedDate").isEqualTo(expected.getUpdatedDate()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPricedProductUpdatableRelationshipsEquals(PricedProduct expected, PricedProduct actual) {
        assertThat(actual)
            .as("Verify PricedProduct relationships")
            .satisfies(a -> assertThat(a.getProduct()).as("check product").isEqualTo(expected.getProduct()))
            .satisfies(a -> assertThat(a.getPrice()).as("check price").isEqualTo(expected.getPrice()));
    }
}
